Note_1: As a form of best practice, always assign 'const' to a value unless you are certain
        it will need to be changed later by javascript, this generally makes your code more 
        robust.

        Otherwise use 'let'.

Note_2: The primitive types in javascript are: 

                    * Strings,
                    * Numbers (p.s: in javascript there are no 'int' or 'double' types, they're
                      all the same to this programming language),
                    * Boolean,
                    * null,
                    * undefined

------------------------------------------------------------------------------------------
html comment: <!-- -->
------------------------------------------------------------------------------------------
This is a template string and this is the prefered way of logging a string to the console 
today:


const hello = `My name is ${name} and I'm ${age} years old.`
console.log(hello);

------------------------------------------------------------------------------------------

const s = "technology, computers, IT, code"; 

console.log(s.length);
console.log(s.substring(0, 5));
console.log(s.split(', '));

------------------------------------------------------------------------------------------
Arrays

const numbers = new Array(1,2,3,4,5);

const fruits = ['apples', 'oranges', 'pears']

fruits[3] = 'grapes';
fruits.push('mangoes');
fruits.unshift('strawberry');
fruits.pop();
console.log(Array.isArray(fruits));
console.log(fruits.indexOf('oranges'));
console.log(fruits);

------------------------------------------------------------------------------------------

const person = {
    fistName: "John",
    lastName: "Doe",
    age: 30,
    hobbies: [
        'music',
        'movies',
        'sports'
    ],
    address: {
        street: "50 main st",
        city: "Boston",
        state: "MA"
    }
}

console.log(person.fistName, person.lastName, person.hobbies[1]);

const {address: {city}} = person;

console.log(city);

------------------------------------------------------------------------------------------

const todos = [
    {
        id: 1,
        text: "Take out the trash",
        isCompleted: true
    },
    {
        id: 2,
        text: "Meeting with boss",
        isCompleted: true
    },
    {
        id: 3,
        text: "Dentist appointment",
        isCompleted: false
    }
];

//console.log(todos[1].text);
/*
const todoJSON = JSON.stringify(todos);
console.log(todoJSON);
*/
//For loops
/*
for(let i = 0; i < todos.length; i++){
    console.log(`For loop n°: ${i + 1}`);
}
*/
/*
for(let todo of todos){
    console.log(todo.text);
}
*/
//While loop
/*
let i = 0;
while(i < 10){
    console.log(`While loop n°: ${i + 1}`);
    i++;
}
*/
//forEach, map, filter

//todos.forEach(function(todo){console.log(todo.text)});

const todoText = todos.map(function(todo){return todo.text});
console.log(todoText);

------------------------------------------------------------------------------------------

one '=' is an attribution of a value to an variable, '==' compares the value but not the types
stored in the variables you're comparing. With '===' the values being compared must be 
identical both in content and type for it to return a boolean 'true'.



const addNums = (num1 = 0, num2 = 0) => {
    return (num1 + num2);
}

console.log(addNums(5, 5));



// Object Oriented Programming

// Constructor function

function Person(firstName, lastName, birthDate){

    //Class attributes
    this.firstName = firstName;
    this.lastName = lastName;
    this.birthDate = new Date(birthDate);
    
    //Class Methods
    Person.prototype.getFullName = function() {
        return (`${this.firstName} ${this.lastName}`);
    }
}

// Instantiation of a object

const person1 = new Person("John", "Doe", "04/03/1980");

console.log(`Citizen name: ${person1.getFullName()}\n\nYear of Birth: ${person1.birthDate.getFullYear()}`);

------------------------------------------------------------------------------------------

//Making a Class
class Person{
    //Class Attributes
    constructor(firstName, lastName, birthDate){
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = new Date(birthDate);
    }
    //Class Methods
    getBirthYear(){
        return this.birthDate.getFullYear();
    }

    getFullName(){
        return `${this.firstName} ${this.lastName}`
    }
}

//Instantiate Object
const person1 = new Person("John","Doe","4-3-1980");

console.log(`\nCitizen Name: ${person1.getFullName()}
\nYear of Birth: ${person1.getBirthYear()}`);

------------------------------------------------------------------------------------------
JavaScript DOM (Document Object Model)

*Single element

    -- Document

    console.log(document.getElementById("my-form"));

    console.log(document.getElementById("my-form"));
    console.log(document.querySelector(".container"));
    console.log(document.querySelector("h1"));

*Multiple element

    console.log(document.querySelectorAll(".item"));

    const ul = document.querySelector(".items");
    const btn = document.querySelector(".btn");

    ul.remove();
    ul.lastElementChild.remove();
    ul.firstElementChild.textContent = "Hello World!";
    ul.children[1].innerText = "Bob";
    ul.lastElementChild.innerHTML = "<h1>Hello World!</h1>";

    btn.style.background = "tomato";
    btn.style.color = "black";

    const btn = document.querySelector(".btn");

    btn.addEventListener("click", (e) => {
    e.preventDefault();
    //console.log("click");
    //console.log(e);
    //console.log(e.target);
    //console.log(e.target.className);
    document.querySelector("#my-form").style.background = "#ccc";
    document.querySelector("h1").style.color = "black";
    document.querySelector("body").classList.add("bg-dark");
    document.querySelector(".items").lastElementChild.innerHTML = "<h1>Hello World!</h1>";
    document.querySelector(".items").style.color = "black";
    });

------------------------------------------------------------------------------------------
*Form Script

    